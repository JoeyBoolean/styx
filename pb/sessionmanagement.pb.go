// Code generated by protoc-gen-go.
// source: sessionmanagement.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sessionmanagement.proto

It has these top-level messages:
	Session
	CreateSessionRequest
	CreateSessionReply
	FindSessionByTokenRequest
	FindSessionByTokenReply
	DeleteSessionByTokenRequest
	DeleteSessionByTokenReply
	DeleteSessionsByOwnerTokenRequest
	DeleteSessionsByOwnerTokenReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	Created    *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	ValidTo    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=valid_to,json=validTo" json:"valid_to,omitempty"`
	Token      string                     `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	OwnerToken string                     `protobuf:"bytes,4,opt,name=owner_token,json=ownerToken" json:"owner_token,omitempty"`
	Agent      string                     `protobuf:"bytes,5,opt,name=agent" json:"agent,omitempty"`
	Ip         string                     `protobuf:"bytes,6,opt,name=ip" json:"ip,omitempty"`
	Policies   []string                   `protobuf:"bytes,7,rep,name=policies" json:"policies,omitempty"`
	Payload    []byte                     `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Session) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Session) GetValidTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Session) GetOwnerToken() string {
	if m != nil {
		return m.OwnerToken
	}
	return ""
}

func (m *Session) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *Session) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Session) GetPolicies() []string {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *Session) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateSessionRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateSessionRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type CreateSessionReply struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Err     string   `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CreateSessionReply) Reset()                    { *m = CreateSessionReply{} }
func (m *CreateSessionReply) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionReply) ProtoMessage()               {}
func (*CreateSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateSessionReply) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *CreateSessionReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type FindSessionByTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *FindSessionByTokenRequest) Reset()                    { *m = FindSessionByTokenRequest{} }
func (m *FindSessionByTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*FindSessionByTokenRequest) ProtoMessage()               {}
func (*FindSessionByTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FindSessionByTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type FindSessionByTokenReply struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Err     string   `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *FindSessionByTokenReply) Reset()                    { *m = FindSessionByTokenReply{} }
func (m *FindSessionByTokenReply) String() string            { return proto.CompactTextString(m) }
func (*FindSessionByTokenReply) ProtoMessage()               {}
func (*FindSessionByTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FindSessionByTokenReply) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *FindSessionByTokenReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteSessionByTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *DeleteSessionByTokenRequest) Reset()                    { *m = DeleteSessionByTokenRequest{} }
func (m *DeleteSessionByTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionByTokenRequest) ProtoMessage()               {}
func (*DeleteSessionByTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteSessionByTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeleteSessionByTokenReply struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Err     string   `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteSessionByTokenReply) Reset()                    { *m = DeleteSessionByTokenReply{} }
func (m *DeleteSessionByTokenReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionByTokenReply) ProtoMessage()               {}
func (*DeleteSessionByTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteSessionByTokenReply) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *DeleteSessionByTokenReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteSessionsByOwnerTokenRequest struct {
	OwnerToken string `protobuf:"bytes,1,opt,name=owner_token,json=ownerToken" json:"owner_token,omitempty"`
}

func (m *DeleteSessionsByOwnerTokenRequest) Reset()         { *m = DeleteSessionsByOwnerTokenRequest{} }
func (m *DeleteSessionsByOwnerTokenRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSessionsByOwnerTokenRequest) ProtoMessage()    {}
func (*DeleteSessionsByOwnerTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *DeleteSessionsByOwnerTokenRequest) GetOwnerToken() string {
	if m != nil {
		return m.OwnerToken
	}
	return ""
}

type DeleteSessionsByOwnerTokenReply struct {
	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	Err      string     `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteSessionsByOwnerTokenReply) Reset()                    { *m = DeleteSessionsByOwnerTokenReply{} }
func (m *DeleteSessionsByOwnerTokenReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionsByOwnerTokenReply) ProtoMessage()               {}
func (*DeleteSessionsByOwnerTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteSessionsByOwnerTokenReply) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *DeleteSessionsByOwnerTokenReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Session)(nil), "pb.Session")
	proto.RegisterType((*CreateSessionRequest)(nil), "pb.CreateSessionRequest")
	proto.RegisterType((*CreateSessionReply)(nil), "pb.CreateSessionReply")
	proto.RegisterType((*FindSessionByTokenRequest)(nil), "pb.FindSessionByTokenRequest")
	proto.RegisterType((*FindSessionByTokenReply)(nil), "pb.FindSessionByTokenReply")
	proto.RegisterType((*DeleteSessionByTokenRequest)(nil), "pb.DeleteSessionByTokenRequest")
	proto.RegisterType((*DeleteSessionByTokenReply)(nil), "pb.DeleteSessionByTokenReply")
	proto.RegisterType((*DeleteSessionsByOwnerTokenRequest)(nil), "pb.DeleteSessionsByOwnerTokenRequest")
	proto.RegisterType((*DeleteSessionsByOwnerTokenReply)(nil), "pb.DeleteSessionsByOwnerTokenReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SessionManagement service

type SessionManagementClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error)
	FindSessionByToken(ctx context.Context, in *FindSessionByTokenRequest, opts ...grpc.CallOption) (*FindSessionByTokenReply, error)
	DeleteSessionByToken(ctx context.Context, in *DeleteSessionByTokenRequest, opts ...grpc.CallOption) (*DeleteSessionByTokenReply, error)
	DeleteSessionsByOwnerToken(ctx context.Context, in *DeleteSessionsByOwnerTokenRequest, opts ...grpc.CallOption) (*DeleteSessionsByOwnerTokenReply, error)
}

type sessionManagementClient struct {
	cc *grpc.ClientConn
}

func NewSessionManagementClient(cc *grpc.ClientConn) SessionManagementClient {
	return &sessionManagementClient{cc}
}

func (c *sessionManagementClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error) {
	out := new(CreateSessionReply)
	err := grpc.Invoke(ctx, "/pb.SessionManagement/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementClient) FindSessionByToken(ctx context.Context, in *FindSessionByTokenRequest, opts ...grpc.CallOption) (*FindSessionByTokenReply, error) {
	out := new(FindSessionByTokenReply)
	err := grpc.Invoke(ctx, "/pb.SessionManagement/FindSessionByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementClient) DeleteSessionByToken(ctx context.Context, in *DeleteSessionByTokenRequest, opts ...grpc.CallOption) (*DeleteSessionByTokenReply, error) {
	out := new(DeleteSessionByTokenReply)
	err := grpc.Invoke(ctx, "/pb.SessionManagement/DeleteSessionByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementClient) DeleteSessionsByOwnerToken(ctx context.Context, in *DeleteSessionsByOwnerTokenRequest, opts ...grpc.CallOption) (*DeleteSessionsByOwnerTokenReply, error) {
	out := new(DeleteSessionsByOwnerTokenReply)
	err := grpc.Invoke(ctx, "/pb.SessionManagement/DeleteSessionsByOwnerToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionManagement service

type SessionManagementServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionReply, error)
	FindSessionByToken(context.Context, *FindSessionByTokenRequest) (*FindSessionByTokenReply, error)
	DeleteSessionByToken(context.Context, *DeleteSessionByTokenRequest) (*DeleteSessionByTokenReply, error)
	DeleteSessionsByOwnerToken(context.Context, *DeleteSessionsByOwnerTokenRequest) (*DeleteSessionsByOwnerTokenReply, error)
}

func RegisterSessionManagementServer(s *grpc.Server, srv SessionManagementServer) {
	s.RegisterService(&_SessionManagement_serviceDesc, srv)
}

func _SessionManagement_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagement/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagement_FindSessionByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSessionByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).FindSessionByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagement/FindSessionByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).FindSessionByToken(ctx, req.(*FindSessionByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagement_DeleteSessionByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).DeleteSessionByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagement/DeleteSessionByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).DeleteSessionByToken(ctx, req.(*DeleteSessionByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagement_DeleteSessionsByOwnerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsByOwnerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).DeleteSessionsByOwnerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagement/DeleteSessionsByOwnerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).DeleteSessionsByOwnerToken(ctx, req.(*DeleteSessionsByOwnerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SessionManagement",
	HandlerType: (*SessionManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionManagement_CreateSession_Handler,
		},
		{
			MethodName: "FindSessionByToken",
			Handler:    _SessionManagement_FindSessionByToken_Handler,
		},
		{
			MethodName: "DeleteSessionByToken",
			Handler:    _SessionManagement_DeleteSessionByToken_Handler,
		},
		{
			MethodName: "DeleteSessionsByOwnerToken",
			Handler:    _SessionManagement_DeleteSessionsByOwnerToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sessionmanagement.proto",
}

func init() { proto.RegisterFile("sessionmanagement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x0e, 0xa9, 0x93, 0x09, 0x20, 0x18, 0x45, 0x74, 0xeb, 0xaa, 0x8a, 0x31, 0xaa, 0xc8,
	0xc9, 0x15, 0x2d, 0x1c, 0xb9, 0xb4, 0x15, 0xb7, 0x0a, 0xc9, 0xe4, 0xc0, 0x01, 0xa9, 0x72, 0x9a,
	0x21, 0x5a, 0x70, 0xbc, 0x8b, 0x77, 0x0b, 0xf2, 0x27, 0xf0, 0xbb, 0x7c, 0x01, 0xf2, 0xae, 0xd7,
	0xa2, 0x89, 0xd3, 0x56, 0xea, 0xcd, 0xb3, 0xf3, 0xde, 0xf8, 0xed, 0x9b, 0x67, 0xc3, 0xae, 0x22,
	0xa5, 0xb8, 0x28, 0x56, 0x59, 0x91, 0x2d, 0x69, 0x45, 0x85, 0x4e, 0x64, 0x29, 0xb4, 0x40, 0x5f,
	0xce, 0xc3, 0xc9, 0x52, 0x88, 0x65, 0x4e, 0x47, 0xe6, 0x64, 0x7e, 0xfd, 0xed, 0x48, 0xf3, 0x15,
	0x29, 0x9d, 0xad, 0xa4, 0x05, 0xc5, 0x7f, 0x7c, 0x08, 0x3e, 0xdb, 0x01, 0xf8, 0x0e, 0x82, 0xab,
	0x92, 0x32, 0x4d, 0x0b, 0xe6, 0x45, 0xde, 0x74, 0x74, 0x1c, 0x26, 0x96, 0x9e, 0x38, 0x7a, 0x32,
	0x73, 0xf4, 0xd4, 0x41, 0xf1, 0x3d, 0x0c, 0x7e, 0x65, 0x39, 0x5f, 0x5c, 0x6a, 0xc1, 0xfc, 0xbb,
	0x69, 0x06, 0x3b, 0x13, 0x38, 0x86, 0xbe, 0x16, 0x3f, 0xa8, 0x60, 0xbd, 0xc8, 0x9b, 0x0e, 0x53,
	0x5b, 0xe0, 0x04, 0x46, 0xe2, 0x77, 0x41, 0xe5, 0xa5, 0xed, 0x3d, 0x36, 0x3d, 0x30, 0x47, 0x33,
	0x03, 0x18, 0x43, 0x3f, 0x5b, 0x52, 0xa1, 0x59, 0xdf, 0xd2, 0x4c, 0x81, 0xcf, 0xc0, 0xe7, 0x92,
	0xed, 0x98, 0x23, 0x9f, 0x4b, 0x0c, 0x61, 0x20, 0x45, 0xce, 0xaf, 0x38, 0x29, 0x16, 0x44, 0xbd,
	0xe9, 0x30, 0x6d, 0x6b, 0x64, 0x10, 0xc8, 0xac, 0xca, 0x45, 0xb6, 0x60, 0x83, 0xc8, 0x9b, 0x3e,
	0x49, 0x5d, 0x19, 0x7f, 0x80, 0xf1, 0x99, 0xb9, 0x54, 0x63, 0x48, 0x4a, 0x3f, 0xaf, 0x49, 0x69,
	0x3c, 0x84, 0xa0, 0xf1, 0xb8, 0xf1, 0x65, 0x94, 0xc8, 0x79, 0xe2, 0x40, 0xae, 0x17, 0x5f, 0x00,
	0xae, 0xd1, 0x65, 0x5e, 0xdd, 0x93, 0x8c, 0xcf, 0xa1, 0x47, 0x65, 0x69, 0x0c, 0x1c, 0xa6, 0xf5,
	0x63, 0xfc, 0x16, 0xf6, 0x3e, 0xf2, 0x62, 0xd1, 0x20, 0x4f, 0x2b, 0x73, 0x7f, 0x27, 0xa9, 0x75,
	0xcf, 0xfb, 0xcf, 0xbd, 0x38, 0x85, 0xdd, 0x2e, 0xca, 0x83, 0x64, 0x9c, 0xc0, 0xfe, 0x39, 0xe5,
	0xd4, 0xde, 0xea, 0x5e, 0x42, 0x66, 0xb0, 0xd7, 0x4d, 0x7a, 0x90, 0x94, 0x73, 0x78, 0x75, 0x63,
	0xaa, 0x3a, 0xad, 0x3e, 0xb5, 0xc9, 0x70, 0x82, 0xd6, 0x12, 0xe4, 0xad, 0x27, 0x28, 0xfe, 0x0a,
	0x93, 0xdb, 0xa6, 0xd4, 0x0a, 0xdf, 0xc0, 0xa0, 0x51, 0xa1, 0x98, 0x17, 0xf5, 0xd6, 0x25, 0xb6,
	0xcd, 0x4d, 0x8d, 0xc7, 0x7f, 0x7d, 0x78, 0xd1, 0xe0, 0x2e, 0xda, 0x0f, 0x12, 0xcf, 0xe0, 0xe9,
	0x8d, 0x68, 0x20, 0xab, 0xe7, 0x75, 0x85, 0x2d, 0x7c, 0xd9, 0xd1, 0x91, 0x79, 0x15, 0x3f, 0xc2,
	0x14, 0x70, 0x73, 0xbb, 0x78, 0x50, 0xe3, 0xb7, 0x06, 0x25, 0xdc, 0xdf, 0xd6, 0xb6, 0x33, 0xbf,
	0xc0, 0xb8, 0x6b, 0x51, 0x38, 0xa9, 0x69, 0xb7, 0xec, 0x3d, 0x3c, 0xd8, 0x0e, 0xb0, 0x93, 0xbf,
	0x43, 0xb8, 0xdd, 0x66, 0x3c, 0xdc, 0xa0, 0x77, 0x2d, 0x33, 0x7c, 0x7d, 0x17, 0xcc, 0xbc, 0x6b,
	0xbe, 0x63, 0x7e, 0x34, 0x27, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xf1, 0x7e, 0xdb, 0x0b,
	0x05, 0x00, 0x00,
}
